// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// formatG__new
RcppExport SEXP formatG__new(SEXP obj_, SEXP ploidy_, SEXP default_levels_, SEXP obj_ncol_, SEXP char_per_allele_, SEXP has_rownames_, SEXP has_colnames_, SEXP colnames_vector_);
RcppExport SEXP _formatG_formatG__new(SEXP obj_SEXP, SEXP ploidy_SEXP, SEXP default_levels_SEXP, SEXP obj_ncol_SEXP, SEXP char_per_allele_SEXP, SEXP has_rownames_SEXP, SEXP has_colnames_SEXP, SEXP colnames_vector_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type obj_(obj_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type ploidy_(ploidy_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type default_levels_(default_levels_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj_ncol_(obj_ncol_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type char_per_allele_(char_per_allele_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type has_rownames_(has_rownames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type has_colnames_(has_colnames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type colnames_vector_(colnames_vector_SEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__new(obj_, ploidy_, default_levels_, obj_ncol_, char_per_allele_, has_rownames_, has_colnames_, colnames_vector_));
    return rcpp_result_gen;
END_RCPP
}
// formatG__process_chunk
RcppExport bool formatG__process_chunk(SEXP ptr, SEXP obj_, SEXP obj_I_, SEXP fun_name_, SEXP has_rownames_, SEXP token_, SEXP NA_action_, SEXP howmuch_, SEXP where_, SEXP what_, SEXP input_or_output_, SEXP set_ncol_);
RcppExport SEXP _formatG_formatG__process_chunk(SEXP ptrSEXP, SEXP obj_SEXP, SEXP obj_I_SEXP, SEXP fun_name_SEXP, SEXP has_rownames_SEXP, SEXP token_SEXP, SEXP NA_action_SEXP, SEXP howmuch_SEXP, SEXP where_SEXP, SEXP what_SEXP, SEXP input_or_output_SEXP, SEXP set_ncol_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj_(obj_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type obj_I_(obj_I_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type fun_name_(fun_name_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type has_rownames_(has_rownames_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type token_(token_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type NA_action_(NA_action_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type howmuch_(howmuch_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type where_(where_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type what_(what_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type input_or_output_(input_or_output_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type set_ncol_(set_ncol_SEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__process_chunk(ptr, obj_, obj_I_, fun_name_, has_rownames_, token_, NA_action_, howmuch_, where_, what_, input_or_output_, set_ncol_));
    return rcpp_result_gen;
END_RCPP
}
// formatG__delete_formatG
RcppExport bool formatG__delete_formatG(SEXP ext);
RcppExport SEXP _formatG_formatG__delete_formatG(SEXP extSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__delete_formatG(ext));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_formatG_parameters
RcppExport SEXP formatG__get_formatG_parameters(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_formatG_parameters(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_formatG_parameters(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__reset_state
RcppExport bool formatG__reset_state(SEXP ptr, SEXP reset_lines_, SEXP set_ncol_);
RcppExport SEXP _formatG_formatG__reset_state(SEXP ptrSEXP, SEXP reset_lines_SEXP, SEXP set_ncol_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type reset_lines_(reset_lines_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type set_ncol_(set_ncol_SEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__reset_state(ptr, reset_lines_, set_ncol_));
    return rcpp_result_gen;
END_RCPP
}
// formatG__loci_to_alleles
RcppExport bool formatG__loci_to_alleles(SEXP ptr);
RcppExport SEXP _formatG_formatG__loci_to_alleles(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__loci_to_alleles(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__to_numeric
RcppExport bool formatG__to_numeric(SEXP ptr);
RcppExport SEXP _formatG_formatG__to_numeric(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__to_numeric(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__loci_token_to_alleles
RcppExport bool formatG__loci_token_to_alleles(SEXP ptr, SEXP token_);
RcppExport SEXP _formatG_formatG__loci_token_to_alleles(SEXP ptrSEXP, SEXP token_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type token_(token_SEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__loci_token_to_alleles(ptr, token_));
    return rcpp_result_gen;
END_RCPP
}
// formatG__alleles_to_dummy
RcppExport bool formatG__alleles_to_dummy(SEXP ptr, SEXP NA_policy_);
RcppExport SEXP _formatG_formatG__alleles_to_dummy(SEXP ptrSEXP, SEXP NA_policy_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type NA_policy_(NA_policy_SEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__alleles_to_dummy(ptr, NA_policy_));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_input
RcppExport Rcpp::StringVector formatG__get_input(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_input(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_input(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_output
RcppExport SEXP formatG__get_output(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_output(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_output(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_levels
RcppExport SEXP formatG__get_levels(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_levels(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_levels(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__add_chars
RcppExport bool formatG__add_chars(SEXP ptr, int howmuch, std::string where, char what);
RcppExport SEXP _formatG_formatG__add_chars(SEXP ptrSEXP, SEXP howmuchSEXP, SEXP whereSEXP, SEXP whatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< int >::type howmuch(howmuchSEXP);
    Rcpp::traits::input_parameter< std::string >::type where(whereSEXP);
    Rcpp::traits::input_parameter< char >::type what(whatSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__add_chars(ptr, howmuch, where, what));
    return rcpp_result_gen;
END_RCPP
}
// formatG__alleles_to_loci
RcppExport bool formatG__alleles_to_loci(SEXP ptr, char token);
RcppExport SEXP _formatG_formatG__alleles_to_loci(SEXP ptrSEXP, SEXP tokenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    Rcpp::traits::input_parameter< char >::type token(tokenSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__alleles_to_loci(ptr, token));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_alleles_number
RcppExport SEXP formatG__get_alleles_number(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_alleles_number(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_alleles_number(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_alleles_vector
RcppExport SEXP formatG__get_alleles_vector(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_alleles_vector(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_alleles_vector(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__get_total_alleles
RcppExport int formatG__get_total_alleles(SEXP ptr);
RcppExport SEXP _formatG_formatG__get_total_alleles(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__get_total_alleles(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__StringM_2_IntM
RcppExport bool formatG__StringM_2_IntM(SEXP ptr);
RcppExport SEXP _formatG_formatG__StringM_2_IntM(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__StringM_2_IntM(ptr));
    return rcpp_result_gen;
END_RCPP
}
// formatG__dummy_to_alleles_matrix
RcppExport bool formatG__dummy_to_alleles_matrix(SEXP ptr);
RcppExport SEXP _formatG_formatG__dummy_to_alleles_matrix(SEXP ptrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type ptr(ptrSEXP);
    rcpp_result_gen = Rcpp::wrap(formatG__dummy_to_alleles_matrix(ptr));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_formatG_module();

static const R_CallMethodDef CallEntries[] = {
    {"_formatG_formatG__new", (DL_FUNC) &_formatG_formatG__new, 8},
    {"_formatG_formatG__process_chunk", (DL_FUNC) &_formatG_formatG__process_chunk, 12},
    {"_formatG_formatG__delete_formatG", (DL_FUNC) &_formatG_formatG__delete_formatG, 1},
    {"_formatG_formatG__get_formatG_parameters", (DL_FUNC) &_formatG_formatG__get_formatG_parameters, 1},
    {"_formatG_formatG__reset_state", (DL_FUNC) &_formatG_formatG__reset_state, 3},
    {"_formatG_formatG__loci_to_alleles", (DL_FUNC) &_formatG_formatG__loci_to_alleles, 1},
    {"_formatG_formatG__to_numeric", (DL_FUNC) &_formatG_formatG__to_numeric, 1},
    {"_formatG_formatG__loci_token_to_alleles", (DL_FUNC) &_formatG_formatG__loci_token_to_alleles, 2},
    {"_formatG_formatG__alleles_to_dummy", (DL_FUNC) &_formatG_formatG__alleles_to_dummy, 2},
    {"_formatG_formatG__get_input", (DL_FUNC) &_formatG_formatG__get_input, 1},
    {"_formatG_formatG__get_output", (DL_FUNC) &_formatG_formatG__get_output, 1},
    {"_formatG_formatG__get_levels", (DL_FUNC) &_formatG_formatG__get_levels, 1},
    {"_formatG_formatG__add_chars", (DL_FUNC) &_formatG_formatG__add_chars, 4},
    {"_formatG_formatG__alleles_to_loci", (DL_FUNC) &_formatG_formatG__alleles_to_loci, 2},
    {"_formatG_formatG__get_alleles_number", (DL_FUNC) &_formatG_formatG__get_alleles_number, 1},
    {"_formatG_formatG__get_alleles_vector", (DL_FUNC) &_formatG_formatG__get_alleles_vector, 1},
    {"_formatG_formatG__get_total_alleles", (DL_FUNC) &_formatG_formatG__get_total_alleles, 1},
    {"_formatG_formatG__StringM_2_IntM", (DL_FUNC) &_formatG_formatG__StringM_2_IntM, 1},
    {"_formatG_formatG__dummy_to_alleles_matrix", (DL_FUNC) &_formatG_formatG__dummy_to_alleles_matrix, 1},
    {"_rcpp_module_boot_formatG_module", (DL_FUNC) &_rcpp_module_boot_formatG_module, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_formatG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
